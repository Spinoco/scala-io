import com.camptocamp.gradle.plugin.*

subprojects {    
    group = 'scala-incubator'
    version = '0.1-SNAPSHOT'
    description = 'The Scala IO incubator project'


    apply plugin: 'scala'
    apply plugin: ByteCodeQuality
//    apply type: Cobertura

    env = System.getenv()

    repositories {
        mavenCentral()  // http://repo1.maven.org/maven2/
        mavenRepo(urls: 'http://scala-tools.org/repo-releases/')
    
        localRepo = env['MAVEN_REPO'] ?: env['HOME']+'/.m2/repository'
        mavenRepo urls: "file://${localRepo}"
    }

    scalaVersion="2.8.0"

    dependencies {
        // Libraries needed to run the scala tools
        scalaTools "org.scala-lang:scala-compiler:${scalaVersion}"
        scalaTools "org.scala-lang:scala-library:${scalaVersion}"

        // Libraries needed for scala api
        compile "org.scala-lang:scala-library:${scalaVersion}"
        testCompile 'junit:junit:4.7', 'org.mockito:mockito-all:1.8.0' 
    }

    compileScala {
        scalaCompileOptions.useCompileDaemon = true
        encoding = "UTF-8"
    }
    
/*    
    tasks.addRule("Pattern: ~<ID>") { String taskName ->
        if (taskName.startsWith ("~")){
            task(taskName) << {
                doFirst {
                    def targetName = taskName.substring(1)
                    def found = getTasksByName(targetName,false)
                    println("found: $found")
                    if(found.size() == 0) {
                        throw new AssertionError("$targetName is not a known task")
                    } else if (found.size() > 1){
                        throw new AssertionError("$targetName matches multiple tasks: $found")
                    }

                    println("continuous $targetName")
                    def taskToExec = found.iterator().next()
                }
            }
        }
    }*/

}
project(':scala-io') {
    dependencies { 
        compile project(':scala-arm')
    }
}

task wrapper(type: Wrapper) { 
  gradleVersion = '0.9'
  jarPath = 'wrapper'
}

