Hi Miles,

I agree that there is an inherent race condition but I don't think that using only Path helps that in any way.  Consider the equivalent snippet when are using only path:


val p:Path = ...
if(p.isDirectory) {  
// Filesystem is mutated external an now is denotes a file

// do stuff assuming p is a valid file.
}

There is no way around this without using Java 7's NIO SecureDirectoryStream API.

So for me this is not an argument to remove the File/Directory classes.  In my mind they make more explicit certain assumptions made in the program.  Assumptions that would be more difficult to recognize if we only have Path.  

Example:

def saveTo(string:String, file:File) = file.write(string)

or with only Path

def saveTo(string:String, file:Path) = file.write(string)

The first alternative offers the compiler and the developer with more information about assumptions of what 'file' must be.  If we have only path there is more likely to have to be checks to verify that file is actually a file.

An argument I see is:  Why only File and Directory?  Why not:

ReadOnlyFile, WritableFile, Directory, FileSymlink, DirectorySymlink, ExecutableFile, etc...

The answer: Because File and Directory encapsulate the most useful set of semantics without an explosion of little classes with limited usefulness.

Jesse