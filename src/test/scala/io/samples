// Test if path is file or directory or does not exist
Path("home/jesse") match {
  case File(file) => // extractor resolves if it is a file
  case Directory(dir) => // same extractor does the work
  case p if(!p.exists) => // doesn't yet exist
  case _ => // oog
}

// create a file
Path("/tmp/file").createFile() // default params so () is required
// create a directory
Path("/tmp/dir").createDirectory() // default params so () is required

// Append a string to a file
// TODO update with ARM API is known; I am making up some ARM style syntax.  
Path("/tmp/file").toFile() match {
  case Some(file) if(file.canWrite) => file.withWriter(append=true){ writer => writer.write(Data) )
  case None => fail("Path is a directory not a file")
}

// write data to a file replacing if it exists
// TODO update with ARM API is known; I am making up some ARM style syntax.  
Path("/tmp/file").toFile() match {
  case Some(file) if(file.canWrite) => file.withOutputStream(){ out => out.write(Data) )
  case None => fail("Path is a directory not a file")
}

// Read complete file
// TODO update with ARM API is known; I am making up some ARM style syntax.  
Path("/tmp/file").toFile() match {
  case Some(file) if(file.canRead) => file.slurp
  case None => fail("Path is a directory not a file")
}
