Hi,

I have been reading the last batch of emails about the File-Directory-Path split with great interest.  First of all I believe that there is a misunderstanding about the role of File and Directory.  File is in no way a FileHandle or FileDescriptor.  It is probably better described as FilePath.  IE a Path that is assumed by the programmer to reference an existing file or not yet exist (and be used to create the File).

But that is mostly moot because I have been writing some code samples that uses the API and I have decided that the split offers only a very slight advantage over just having Path.  

So I am now leaning towards not having Path-File-Directory and instead having a Path and very clean semantics for opening files and directories and operating on them.  I am in the midst of refactoring the code from File and Directory into Path.  However for this first draft I am minimizing the number convenience methods and keeping the API as simple as possible.  In fact until I have time to review the ARM project I am not even going to provide read/write access to files.  I will just add the placeholders openFile and openDirectory.

So to recap I am looking at moving from:

           Path
          /     \
        /         \
FilePath   DirectoryPath
    
To something like (I need to review the ARM work being done because the API will depend on that work)

Path <> -- FileResource    // provides access to file
     <> -- DirectoryStream // See NIO directory stream (but scalified)

or maybe 

Path <> -- InputStreamResource
     <> -- OutputStreamResource
     <> -- FileChannelResource
     <> -- DirectoryStream     // See NIO directory stream

(Details will be forth coming :))

The reasons for going with this style architecture are:
* Obviously there is great confusion as shown in this thread
* Having FilePath and DirectoryPath makes certain common operations on File and Directory a little confusing.  (I have made several code examples comparing the two and have seen very little benefit to the FilePath architecture)

Does this sound like a plan?

Could someone please create a ScalaIO repository in the incubator github project for me and add jesseeichar as a collaborator?  I have my code in my personal repo but only temporarily until I can put in the incubator.  

Jesse 