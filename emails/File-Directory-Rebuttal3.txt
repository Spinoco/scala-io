Thanks for all the feedback.  With regards to Path File Directory.  I am going to look once again at the NIO API and review Path and associated files to see if it invalidates our split.  




It seems to me that are misunderstanding the split.  I am recommending a name change(see end of email).  

File-Path-Directory does not mirror the FileDescriptor/Path split. It simply is taking the methods that are present in NIO's Path object and putting them in 3 classes each of which has some sematics.  I have re-read the NIO Path documentation I now believe that inheritance IS the correct modelling.  

In this API File IS A path; a path that the user *expects/thinks* references a File (Obviously no guarantees.)  Creating a File object does not need to access the FileSystem (no openning files or directories).  

To me the following are equivalent:

NIO API
val homeDir = java.nio.file.Paths.get("/home/jesse")

A hypothetical but unrealized Scala IO API
val homeDir = scala.io.Directory("/home/jesse")

Obviously the following is also acceptable:
val homeDir = scala.io.Path("/home/jesse")

Wait before you scream :)  

To me the difference between the last two is only that Directory states using the type system that homeDir is a Directory.  In the last example that statement is only declared in the variable name so you don't get type checking.  

Would a name change help:

      Path
      /  \
     /    \
FilePath  DirectoryPath


It is NOT

Path <>-> File


This is my last push for this point of view.  Afterwords I will ask for a vote on this issue.  

Jesse
