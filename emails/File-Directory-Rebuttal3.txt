Thanks for all the feedback.  With regards to Path File Directory.  I am going to look once again at the NIO API and review Path and associated files to see if it invalidates our split.  


It seems to me that are misunderstanding the split and I suggest a name change perhaps:

      Path
      /  \
     /    \
FilePath  DirectoryPath


It is NOT

Path <>-> File


My reasoning is that File-Path-Directory does not mirror the FileDescriptor/Path split as Miles appears to believe (perhaps I misunderstand).  The split simply is taking the methods that are present in NIO's Path object and putting them in 3 classes, each of which have some sematics.  I have re-read the NIO Path documentation I now believe that inheritance IS the correct modelling.  In this API FilePath IS a Path; a Path that the user *expects/thinks* references a File (Obviously no guarantees.)  Creating a FilePath object does not need to access the FileSystem (no opening files or directories).  

To me the following are equivalent:

NIO API
val homeDir = java.nio.file.Paths.get("/home/jesse")

A hypothetical but unrealized Scala IO API
val homeDir = scala.io.DirectoryPath("/home/jesse")

Obviously the following is also acceptable:
val homeDir = scala.io.Path("/home/jesse")

Wait before you scream :)  

To me the difference between the last two is only that DirectoryPath states (using the type system) that homeDir is a Directory.  In the last example that statement is only declared in the variable name so you don't get type checking.  

This is my last push for this point of view.  Afterwords I will ask for a vote on this issue unless there is a better way to resolve this issue.  

Jesse
